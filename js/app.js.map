{"version":3,"sources":["app/app.js","app/js/controllers/AppCtrl.js","app/js/controllers/EditUserController.js","app/js/controllers/NewUserController.js","app/js/controllers/UserController.js","app/js/controllers/UsersController.js","app/js/directives/appVersion.js","app/js/factories/constants.js","app/js/filters/interpolate.js","app/js/services/generator.js","app/js/services/paginator.js","app/js/services/search.js","app/js/services/store.js","app/js/services/version.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CCfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CCnBA;AACA;AACA;AACA;CCHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CCZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CChvfile":"public/js/app.js","sourcesContent":["'use strict';\n\nvar App = angular.module(\"app\",['ui.router',\"ngAnimate\"]).config([\"$stateProvider\",\"$locationProvider\",\"$urlRouterProvider\", function($stateProvider,$locationProvider,$urlRouterProvider){\n\tdebugger;\n\t$locationProvider.hashPrefix('!');\n\t$urlRouterProvider.otherwise(\"/users\");\n\t$stateProvider.state('users',{\n\t\turl:'/users', //root route for the application\n\t\ttemplateUrl: \"partials/users.html\",\n\t\tcontroller: 'UsersController',\n\t\tresolve: {\n\t\t\tusers: function(store,constants,generator){\n\t\t\t\t//read all the existing user records and create some fake ones when entering into\n\t\t\t\t//users route. If store.readAll() returns a promise then transition will wait for it to resolve\n\t\t\t\tvar users = store.readAll(\"user\"); \n\t\t\t\tif(users.length < constants.maxUsers){\n\t\t\t\t\t//Generate Fake Users\n\t\t\t\t\tconsole.log(\"generating fake stuff\");\n\t\t\t\t\tvar i = constants.fakeUserCount;\n\t\t\t\t\twhile(i>0){\n\t\t\t\t\t\tvar user = generator.generateFakeUser();\n\t\t\t\t\t\tstore.create(\"user\",user);\n\t\t\t\t\t\ti--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn store.readAll(\"user\");\n\t\t\t}\n\t\t}\n\t}).state(\"newUser\",{\n\t\turl:'/user-new',\n\t\ttemplateUrl: \"partials/new-user.html\",\n\t\tcontroller:\"NewUserController\",\n\t}).state(\"showUser\",{\n\t\turl:'/user/:id',\n\t\tcontroller:\"UserController\",\n\t\ttemplateUrl:'partials/user-show.html',\n\t\tresolve:{\n\t\t\tuser:function($stateParams,store){\n\t\t\t\treturn store.read(\"user\",$stateParams.id)\n\t\t\t}\n\t\t}\n\t}).state(\"editUser\",{\n\t\turl:'/edit/:id',\n\t\tcontroller:\"EditUserController\",\n\t\ttemplateUrl:'partials/new-user.html',\n\t\tresolve:{\n\t\t\tuser:function($stateParams,store){\n\t\t\t\treturn store.read(\"user\",$stateParams.id)\n\t\t\t}\n\t\t}\n\t})\n\t// Without server side support html5 must be disabled.\n\treturn $locationProvider.html5Mode(false);\t\n}]);","// App.controller('AppCtrl', [\n\t// '$scope', '$location', '$resource', '$rootScope', function($scope, $location, $resource, $rootScope) {\n\t\t// Uses the url to determine if the selected\n\t\t// menu item should have the class active.\n\t\t// $scope.$location = $location;\n\t\t// $scope.$watch('$location.path()', function(path) {\n\t\t\t// return $scope.activeNavId = path || '/';\n\t\t// });\n\t\t/* getClass compares the current url with the id.\n\t\t * If the current url starts with the id it returns 'active'\n\t\t * otherwise it will return '' an empty string. E.g.\n\t\t *\n\t\t *   # current url = '/products/1'\n\t\t *   getClass('/products') # returns 'active'\n\t\t *   getClass('/orders') # returns ''\n\t\t */\n\t\t// return $scope.getClass = function(id) {\n\t\t\t// if($scope.activeNavId.substring(0, id.length) === id) {\n// \t\t\t\treturn 'active';\n// \t\t\t} else {\n// \t\t\t\treturn '';\n// \t\t\t}\n// \t\t};\n// \t}\n// ])\n\nApp.controller(\"AppController\",[\"store\",\"$scope\",\"$location\",function(store,$scope,$location){\n\tstore.initiateStore();\n}])","App.controller(\"EditUserController\",[\"$state\",\"store\",\"constants\",\"$scope\",\"user\",function($state,store,constants,$scope,resolvedUser){\n\t$scope.pageClass = \"edit-user\";\n\t$scope.submitForm = function(isValid){\n\t\tif(isValid){\n\t\t\tvar user = $scope.user;\n\t\t\tstore.update(\"user\",user);\n\t\t\t$state.go(\"showUser\",{id:user.id})\n\t\t}\n\t}\n\t$scope.resetForm = function(){\n\t\t$scope.user = resolvedUser;\n\t\t$scope.roleOptions = constants.availableRoles;\n\t\t$scope.statusOptions = constants.possibleStatus;\n\t}\n\t$scope.resetForm();\n}])","App.controller(\"NewUserController\",[\"$state\",\"store\",\"generator\",\"constants\",\"$scope\",function($state,store,generator,constants,$scope){\n\t$scope.pageClass = \"new-user\";\n\t$scope.submitForm = function(isValid){\n\t\tif(isValid){\n\t\t\tvar user = $scope.user;\n\t\t\tuser.photo = \"icon\"+Math.floor(Math.random()*12+1).toString();\n\t\t\tstore.create(\"user\",user);\n\t\t\t//setting the form inputs back to pristine state so that form state is completely reset.\n\t\t\t$state.go(\"showUser\",{id:user.id})\n\t\t}\n\t}\n\t$scope.resetForm = function(){\n\t\t$scope.user = {}\n\t\t$scope.roleOptions = constants.availableRoles;\n\t\t$scope.statusOptions = constants.possibleStatus;\n\t\t$scope.user.status = $scope.statusOptions[0];\t\n\t\t$scope.user.role = $scope.roleOptions[0];\n\t}\n\t$scope.resetForm();\n}])","App.controller(\"UserController\",[\"store\",\"$scope\",\"user\",function(store,$scope,user){\n\t$scope.pageClass = \"show-user\";\n\t$scope.user = user;\n}])","App.controller(\"UsersController\",[\"store\",\"generator\",\"constants\",\"paginator\",\"search\",\"$scope\",\"users\",function(store,generator,constants,paginator,search,$scope,users){\n\t$scope.pageClass = \"user-list\";\n\tvar totalUsers = users;\n\t$scope.filteredUsers = users;\n\t$scope.deleteUser = function(user){\n\t\tstore.deleteRecord(\"user\",user.id);\n\t\t$scope.filteredUsers = store.readAll(\"user\")\n\t\t$scope.setCurrentPage($scope.currentPage);\n\t}\n\n\tsearch.setKeyPropertyMap({\n\t\trole:\"Role\",\n\t\tname:\"Name\",\n\t\tstatus:\"Status\",\n\t\tdob:\"DOB\"\n\t},\"name\");\n\n\t//Watch the searchText value and perform search. Currently a simple text based\n\t//filtering of the results. \n\t$scope.$watch('searchText',function(value){\n\t\t$scope.filteredUsers = search.performSearch(totalUsers,value);\n\t\t$scope.setCurrentPage(1);\n    });\n\n    //Pagination related code\n    $scope.perPageResultsOptions = [5,10,15]\n    $scope.resultsPerPage = $scope.perPageResultsOptions[1]\n    $scope.pagesToShow = 10;\t//set the number of pages that will be shown in the pagination list.\n    $scope.setCurrentPage = function(number){\n\t    $scope.pageObjects = paginator.generatePageObjects($scope.resultsPerPage,$scope.filteredUsers.length,number,$scope.$pagesToShow)\n    \t$scope.pagedUsers = paginator.filterResults(number,$scope.filteredUsers,$scope.resultsPerPage)\n    \t$scope.metaString = paginator.getFilterMetaString(number,$scope.filteredUsers,$scope.resultsPerPage);\n    \t$scope.currentPage = number;\n    \t//call current page recursively till our paged users have a certain length.\n    \t//takes care of the conditions when we delete first entry from a page. \n    \tif(($scope.pagedUsers.length == 0) && (number>1)){\n    \t\t$scope.setCurrentPage(--number);\n    \t}\n    }\n    $scope.setCurrentPage(1);\n    $scope.$watch('resultsPerPage',function(){\n\t    $scope.setCurrentPage(1);\n    })\n}])","'use strict';\n/* Directives*/\n\n// register the module with Angular\nApp.directive('appVersion', [ // require the 'app.service' module\n\t'version','service', function(version) {\n\t\treturn function(scope, elm, attrs) {\n\t\t\treturn elm.text(version);\n\t\t};\n\t}\n]);","\"use strict\";\n\n//Use this as an object for containing App wide constants. So we do not have to do\n//multiple changes if we decide to change some constants. \n\nApp.factory(\"constants\",function(){\n\treturn {\n\t\tfakeUserCount: 20,\n\t\tmaxUsers: 20, //maximum number of users that will be generated.\n\t\tavailableRoles:[\"Admin\",\"Staff\",\"Manager\",\"Member\"],\n\t\tpossibleStatus:[\"Active\",\"Inactive\",\"Blocked\",\"Pending\"]\n\t}\n})","'use strict';\n/* Filters*/\n\nApp.filter('interpolate', [\n\t'version', function(version) {\n\t\treturn function(text) {\n\t\t\treturn String(text).replace(/\\%VERSION\\%/mg, version);\n\t\t};\n\t}\n]);","\n//Controller responsible for generating fake data\n\nApp.service(\"generator\",[ \"constants\", function(constants){\n\t\tvar constants = constants;\n\t\tthis.generateFakeUser = function(){\n\t\t\treturn {\n\t\t\t\tname:Faker.Name.findName(),\n\t\t\t\tdob:moment(Faker.Date.between(1970,2000)).format(\"DD/MM/YYYY\"),\n\t\t\t\tphoto:\"icon\"+Math.floor(Math.random()*12+1).toString(),\n\t\t\t\tstatus:constants.possibleStatus[Math.floor(Math.random()*constants.possibleStatus.length)],\n\t\t\t\trole:constants.availableRoles[Math.floor(Math.random()*constants.availableRoles.length)],\n\t\t\t\tregistration_date:moment(Faker.Date.recent(2014)).format(\"DD/MM/YYYY\")\n\t\t\t}\n\t\t}\n\t}]\n)","App.service(\"paginator\",[function(){\n\tthis.appendPrevNext = true;\n\tvar getStartEndPage = function(pageNumbers,currentPage,pagesToShow){\n    \t//This method will return an object with start and end page values.\n    \t//Doesnt need to be exposed to other modules.\n\t\tvar pagesObj = {startPage:0,endPage:0}\n\t\tvar floorVal = Math.floor(pagesToShow/2);\n\t\tif((currentPage-floorVal)< 1){\n\t\t\tpagesObj.startPage = 1;\n\t\t\tif(pageNumbers<=pagesToShow){\n    \t\t\tpagesObj.endPage = pageNumbers;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tpagesObj.endPage = pagesToShow;\n\t\t\t}\n\t\t}\t\n\t\telse if((currentPage+floorVal) > pageNumbers){\n\t\t\tpagesObj.endPage = pageNumbers;\n\t\t\tif(pageNumbers<=pagesToShow){\n    \t\t\tpagesObj.startPage = pagesObj.endPage - (pageNumbers-1);\n\t\t\t}\n\t\t\telse{\n    \t\t\tpagesObj.startPage = pagesObj.endPage - (pagesToShow-1);\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tpagesObj.startPage = currentPage-floorVal;\n\t\t\tpagesObj.endPage = currentPage+floorVal;\n\t\t}\n\t\treturn pagesObj;\n\t}\n\n\tthis.generatePageObjects = function(pageCount,itemCount,currentPage,pagesToShow){\n   \t\tvar pageNumbers = Math.ceil(itemCount/pageCount);\n    \tvar pagesToShow = pagesToShow || pageNumbers;\n    \tvar startPage = getStartEndPage(pageNumbers,currentPage,pagesToShow).startPage;\n    \tvar endPage = getStartEndPage(pageNumbers,currentPage,pagesToShow).endPage;\n    \tvar i=startPage;\n    \tvar pageObjects = [];\n    \twhile(i<=endPage){\n    \t\tvar pageObject = {\n    \t\t\tactive:(i==currentPage),\n    \t\t\tnumber:i,\n    \t\t\ttitle:i++\n    \t\t}\n    \t\tpageObjects.push(pageObject);\n    \t}\n    \t//Addding previous and next page objects. \n    \tif(this.appendPrevNext){\n    \t\tif(currentPage != 1){\n\t    \t\tvar prevObject = {\n\t    \t\t\tactive:false,\n\t    \t\t\tnumber:currentPage-1,\n\t    \t\t\ttitle:\"Previous\"\n\t    \t\t}\n\t    \t\tpageObjects.unshift(prevObject);\n    \t\t}\n    \t\tif(currentPage != pageNumbers){\n    \t\t\tvar nextObject = {\n    \t\t\t\tactive:false,\n    \t\t\t\tnumber:currentPage+1,\n    \t\t\t\ttitle:\"Next\"\t\n    \t\t\t}\n    \t\t\tpageObjects.push(nextObject);\t\n    \t\t}\n    \t}\n    \treturn pageObjects;\n\t}\n\tthis.filterResults = function(currentPage,items,pageCount){\n\t\t//filter the items on the basis of the current page value and the total number\n\t\t//of pages.\n\t\tif(currentPage<1){\treturn []; }\n\t\tvar startIndex = (currentPage-1)*pageCount;\n\t\tvar endIndex = (currentPage)*pageCount;\n\t\treturn items.slice(startIndex,endIndex);\n\t}\n\tthis.getFilterMetaString = function(currentPage,items,pageCount){\n\t\tif(items.length == 0){return \"\";}\n\t\tvar firstRes = ((currentPage-1)*pageCount)+1;\n\t\tvar lastRes = (currentPage)*pageCount;\n\t\tif(lastRes<=items.length){\n\t\t\tvar metaString = \"Showing \"+firstRes+\" - \"+lastRes+\" of \"+items.length+\" results.\";\n\t\t}else{\n\t\t\tvar metaString = \"Showing \"+firstRes+\" - \"+items.length+\" of \"+items.length+\" results.\";\n\t\t}\n\t\tif(items.length==1){\n\t\t\tvar metaString = \"Showing 1 of 1 result.\";\n\t\t}\n\t\treturn metaString;\n\t}\n}])","App.service(\"search\",[function(){\n\t/*\n\t\tWe are supporting text search on various property values of the \n\t\trecords in the array. User inputs a single string having a unique\n\t\tidentifier to map to the property and then the search string\n\t\t\n\t\te.g input = \"role:Admin\", this will do text search on all objects\n\t\tand return those who have their role property set to 'Admin'\n\t*/\n\tthis.setKeyPropertyMap = function(object,defaultProp){\n\t\tthis.keyPropertyMap = object;\n\t\t//take first key as default search property if not specified by user.\n\t\tthis.defaultProperty = defaultProp || Object.keys(object)[0];\n\t}\n\n\t//Return an object consisting of key and search string to be used\n\t//for search. If no match is found then we use default key. \n\tvar giveTypeAndString = function(string){\n\t\tif(string.indexOf(\":\")>0){\n\t\t\tvar strings = string.split(\":\");\n\t\t\tvar map = this.keyPropertyMap;\n\t\t\tvar matchedKey;\n\t\t\tvar keyDidMatch=false;\n\t\t\tfor(var key in map){\n\t\t\t\tif(map[key].indexOf(strings[0])!=-1){\n\t\t\t\t\tmatchedKey = key;\n\t\t\t\t\tkeyDidMatch = true;\n\t\t\t\t\tbreak;\t\n\t\t\t\t}else{\n\t\t\t\t\tkeyDidMatch = false; \n\t\t\t\t\tmatchedKey = this.defaultProperty;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(keyDidMatch){\n\t\t\t\treturn{\n\t\t\t\t\tkey:matchedKey,\n\t\t\t\t\tsearch:strings[1]\n\t\t\t\t}\t\n\t\t\t}else{\n\t\t\t\treturn{\n\t\t\t\t\tkey:matchedKey,\n\t\t\t\t\tsearch:string\n\t\t\t\t}\t\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\treturn{\n\t\t\t\tkey:this.defaultProperty,\n\t\t\t\tsearch:string\n\t\t\t}\n\t\t}\n\t}\n\n\tthis.performSearch = function(items,string){\n\t\tif((string == undefined) || (string == \"\")){\n\t\t\treturn items;\n\t\t}\n\t\telse{\n\t\t\tvar searchObj = giveTypeAndString.call(this,string);\n\t\t\treturn items.filter(function(item){\n\t\t\t\tvar propVal = item[searchObj['key']];\n\t\t\t\tvar stringVal = searchObj['search'];\n\t\t\t\tif(propVal.toLowerCase().indexOf(stringVal.toLowerCase())>0){\n\t\t\t\t\t//fix for getting surnames in search results.\n\t\t\t\t\treturn propVal[(propVal.toLowerCase().indexOf(stringVal.toLowerCase()))-1] == \" \";\n\t\t\t\t}\n\t\t\t\treturn propVal.toLowerCase().indexOf(stringVal.toLowerCase()) == 0 \n\t\t\t})\n\t\t}\n\t}\n\n}])","App.service(\"store\",function(){\n\t//Store will act as a mediator between the data provider and our application. Will implement basic\n\t//CRUD operations here which will be exposed to our application as a service. \n\tthis.initiateStore = function(){\n\t\tif(localStorage.getItem(\"appStore\") === null){\n\t\t\tthis.recordsContainer = {};\n\t\t\tlocalStorage.setItem(\"appStore\",JSON.stringify(this.recordsContainer));\n\t\t}\n\t\telse{\n\t\t\tthis.loadStore();\n\t\t}\n\t}\n\n\tthis.fetchStore = function(){\n\t\t//save some lines of code by abstracting out in a function. A simple ORM.\n\t\treturn this.recordsContainer;\n\t}\n\tthis.persistStore = function(){\n\t\tlocalStorage.setItem(\"appStore\",JSON.stringify(this.fetchStore()));\n\t}\n\tthis.loadStore = function(){\n\t\tthis.recordsContainer = JSON.parse(localStorage.getItem(\"appStore\"));\n\t}\n\n\tthis.lastRecordId = function(type){\n\t\tvar store = this.fetchStore();\n\t\tvar records = store[type];\n\t\tif(records.reduce){\n\t\t\treturn records.reduce(function(prevRecord,curRecord){\n\t\t\t\tif(prevRecord.id > curRecord.id){\n\t\t\t\t\treturn prevRecord;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\treturn curRecord;\n\t\t\t\t}\n\t\t\t}).id\n\t\t}\n\t\telse{\n\t\t\treturn 0;\n\t\t}\n\t\t\n\t}\n\n\tthis.create = function(type,record){\n\t\t//1. get the key storing values of the `type` to be created.\n\t\t//2. add an entry to the existing array of records.\n\t\t//3. save back the stringified version\n\t\tvar store = this.fetchStore();\n\t\tvar type =  type.toString();\n\t\tif(store.hasOwnProperty(type)){\n\t\t\tvar records = store[type];\n\t\t\trecord[\"id\"] = this.lastRecordId(type)+1;\n\t\t\trecords.push(record);\n\t\t}\n\t\telse{\n\t\t\trecord[\"id\"] = 1;\n\t\t\tstore[type] = [record];\n\t\t}\n\t\tthis.persistStore();\n\t\treturn record;\n\t}\n\tthis.read = function(type,id){\n\t\tvar store = this.fetchStore();\n\t\tvar type =  type.toString();\n\t\tvar records = store[type] || []\n\t\treturn records.filter(function(record){return record.id == id})[0]\n\t}\n\tthis.readAll = function(type){\n\t\tvar store = this.fetchStore();\n\t\tvar type =  type.toString();\n\t\treturn store[type] || [];\n\t}\n\n\tthis.update = function(type,data){\n\t\tif(data.id === undefined || data.id < 1){return {};}\n\t\tvar store = this.fetchStore();\n\t\tvar type =  type.toString();\n\t\tvar record = this.read(type,data.id);\n\t\tif(!(record === undefined)){\n\t\t\tfor(var key in data){\n\t\t\t\t//(Object.keys(record).indexOf(key) != -1) add this if we need to prevent update\n\t\t\t\t//action from adding keys to the original object.\n\t\t\t\tif(key.toString() != \"id\"){\n\t\t\t\t\t//don't allow for id modification\n\t\t\t\t\trecord[key] = data[key];\n\t\t\t\t}\n\t\t\t}\n\t\t\t//Replace the record in records array by our new record.\n\t\t\tvar records = store[type] || [];\n\t\t\trecords.filter(function(recrd){\n\t\t\t\treturn recrd.id == record.id;\n\t\t\t})[0] = record;\n\t\t\tthis.persistStore();\n\t\t\treturn record;\n\t\t}\n\t\treturn{};\n\t}\n\tthis.deleteRecord = function(type,id){\n\t\tvar record = this.read(type,id);\n\t\tvar records = this.readAll(type);\n\t\tif(records.indexOf(record) != -1){\n\t\t\trecords.splice(records.indexOf(record),1);\n\t\t\tthis.persistStore();\n\t\t\treturn record;\n\t\t}\n\t\telse{\n\t\t\treturn {};\n\t\t}\n\t}\n\t\n})","'use strict';\n/* Services*/\n\nApp.factory('version', function() {\n\treturn \"0.4.0\";\n});\n"]}